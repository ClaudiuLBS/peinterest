@model project.net.ViewModels.BookmarksAndCategories
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.TagHelpers
@inject UserManager<AppUser> userManager

@{
    string? bookmarkId = Context.Request.Query["bookmarkId"];
    var bookmark = Model.Bookmark;

    var savedToCategories = bookmark?.BookmarkCategories;
    var userId = userManager.GetUserId(User);
}
<style>
    .my-modal {
        position: absolute;
        width: 60vw;
        height: 70vh;
        background: #ffffff;
        box-shadow: 1px 1px 10px 1px;
        border-radius: 5px;
        overflow: hidden;
        display: grid;
        grid-template-rows: 1fr 10fr 2fr;
        grid-template-columns: 1fr 1fr;
        grid-template-areas: 
           "header header"
           "img com"
           "img newcom";
    }
    .modal-img {
        flex: 1;
        max-width: 100%;
        max-height: 40vh;
        object-fit: contain;
    }
    #img-container {
        display: flex;
        align-items: center;
        justify-content: center;
        background: #000;
        grid-area: img;
    }
    #comment-section {
        display: flex;
        flex-direction: column;
        grid-area: comments;
        overflow-y: scroll;
        margin-bottom: .5em;
    }

    .my-header {
        display: flex !important;
        flex-direction: row !important;
        justify-content: space-between !important;
        padding: .5em 1em;
        align-items: center;
        background: #e9e9e9;
    }
    #right-modal {
        flex: 1;
        grid-area: com;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        padding: 1em;
        overflow-y: scroll;
        overflow-x: hidden;
    }
    .comm {
        border-radius: 5px;
        box-shadow: 1px 3px 10px .1px #a9a9a9;
        margin: .8em .5em;
        position: relative;
    }
    .new-comm-box {
        grid-area: newcom;
        padding: 1em;
        width: 100%;
        background: #e9e9e9;
    }
    #save-bookmark {
        font-size: 1.4em;
    }
    .dropdown-item:hover {
        cursor: pointer;
    }
    #bookmark-menu:after{
        display: none !important;
    }
    #bookmark-edit-container {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        margin: 0 auto;
        font-size: 1.3em;
        color: #fff;
        display: flex;
        justify-content: center;
    }

    #confirm-bookmark-edit,
    #cancel-bookmark-edit {
        align-items: center;
        padding: .1em 1em;
    }
    #confirm-bookmark-edit:hover {
        color: rgb(104, 217, 52);
        cursor: pointer
    }
    #cancel-bookmark-edit:hover {
        color: rgb(209, 55, 38);
        cursor: pointer;
    }
    #confirm-bookmark-edit {
        border: 1px solid rgb(104, 217, 52);
        background: rgba(104, 217, 52, .5);
        border-bottom-left-radius: 20px;
    }
    #cancel-bookmark-edit {
        border: 1px solid rgb(209, 55, 38);
        background: rgba(209, 55, 38, .5);
        border-bottom-right-radius: 20px;
    }
    .bi-check {
        font-size: 1.5em;
    }
    .comment-menu {
        margin: 0;
        padding: 0;
    }
    .comm .comment-menu{
        visibility: hidden;
    }

    .comm:hover .comment-menu{
        visibility: visible;
    }
    .comment-menu:after{
        display: none;
    }
</style>

@if (bookmark != null)
{
    <div class="my-modal">
        <div style="grid-area: header" class="my-header">
            <div style="display: flex; align-items: center">
                <!-- BOOKMARK OPTIONS (DELETE, EDIT) -->
                @if (bookmark.UserId == userId || User.IsInRole("Admin"))
                {
                    <div class="dropdown">
                        <button id="bookmark-menu" class="btn dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-three-dots-vertical"></i>
                        </button>
                        <ul class="dropdown-menu">
                            <li class="dropdown-item" onclick="handleEditBookmark()">
                                <i class="bi bi-pencil-square"></i> Edit
                            </li>
                            <li class="dropdown-item">
                                <form method="post" asp-controller="Bookmarks" asp-action="Delete" asp-route-bookmarkId="@bookmark.Id">
                                    <button class="btn" type="submit" style="padding-left: 0">
                                        <i class="bi bi-trash-fill"></i> Delete
                                    </button>
                                </form>
                            </li>
                        </ul>
                    </div>
                }
                
                <!-- BOOKMARK SAVING -->
                @if (User.Identity.IsAuthenticated)
                {
                    <div class="dropdown">
                        <button class="btn dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <i id="save-bookmark" class="bi bi-bookmark-star-fill"></i>
                        </button>
                        <ul id="categories-list" class="dropdown-menu">
                            <li style="padding: 0 7px"><input onkeypress="addNewCategory(event, @bookmark.Id)" type="text" class="form-control" placeholder="New Category"/></li>
                            <li><hr class="dropdown-divider"></li>
                            @foreach (var category in Model.Categories!)
                            {
                                <li class="dropdown-item" value="@category.Id" onclick="addBookmarkToCategory(event, @bookmarkId)">
                                    <i class="bi @(savedToCategories != null && savedToCategories.Any(stc => stc.CategoryId == category.Id) ? "bi-bookmark-fill" : "bi-bookmark")" id="category_@category.Id"></i> @category.Name
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
            
            <!-- TITLE -->
            <div style="display: flex; align-items: center">
                <div id="title-section">@bookmark.Title</div>
                <div><a href="/u/@bookmark.UserId">&nbsp;| @bookmark.User.UserName</a></div>
            </div>

            <!-- CLOSE BUTTON -->
            <button type="button" onclick="closeBookmarkModal()" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>

        <!-- IMAGE -->
        <div id="img-container">
            <img src="/images/@bookmark.Image" class="modal-img" alt="not found" />
            @await Html.PartialAsync("RatingComponent", bookmark)
        </div>

        <div id="right-modal">
            <div>
                <!-- DESCRIPTION -->
                <div id="description-section" class="comm" style="padding: 1em">
                    <p style="overflow-wrap: break-word">@bookmark.Description</p>
                </div>
                <!-- COMMENTS -->
                @if (bookmark.Comments != null)
                {
                    foreach (var comment in bookmark.Comments.OrderByDescending(c => c.CreatedAt))
                    {
                        <div id="comment_@(comment.Id)" class="comm">
                            <!-- COMMENT OPTIONS (DELETE, EDIT) -->
                            @if (comment.UserId == userId)
                            {
                                <div class="dropdown" style="position: absolute; bottom: 5px; right: 5px; margin: 0; padding: 0">
                                    <button class="btn dropdown-toggle comment-menu" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="bi bi-three-dots-vertical"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li class="dropdown-item" onclick="deleteComment(@comment.Id)">
                                            <i class="bi bi-trash-fill"></i> Delete
                                        </li>

                                        <li class="dropdown-item" onclick="editComment(@comment.Id)">
                                            <i class="bi bi-pencil-square"></i> Edit
                                        </li>
                                    </ul>
                                </div>
                            }
                            <div class="toast-header" style="padding-bottom: 0; display: block">
                                <!-- COMMENT HEADER CONTENT-->
                                <div style="display: flex; justify-content: space-between; width: 100%">
                                    <strong class="me-auto">
                                        <a href="/u/@comment.UserId">@comment.User.UserName</a>
                                    </strong>
                                    <small class="text-muted">@comment.CreatedAt.Value.ToString("dd MMM yyyy HH:mm")</small>
                                </div>
                            </div>
                            <div id="comment_content_@(comment.Id)" class="toast-body" style="padding-top: 0; white-space: pre-line">@comment.Content</div>
                        </div>
                    }
                }
            </div>
        </div>
        <!-- NEW COMMENT-->
        <div class="new-comm-box">
             @await Html.PartialAsync("AddComment", bookmark)
        </div>
    </div>
}
